{"version":3,"sources":["Modal.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["Modal","this","props","show","react_default","a","createElement","className","content","onClick","onClose","Component","Movie","state","isOpen","toggleModal","_this","setState","Movie_MoviePoster","poster","alt","title","genres","map","genre","index","MovieGenre","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","src_Modal_0","_ref","MoviePoster","src","App","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_callApi","sent","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie_0","medium_cover_image","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e616dff.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n\r\nclass Modal extends Component{\r\n\r\n    static propTypes = {\r\n        onClose : PropTypes.func.isRequired,\r\n        content : PropTypes.string.isRequired,\r\n        show : PropTypes.bool,\r\n    }\r\n    render(){\r\n        if(!this.props.show){\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <div className=\"backdrop\">\r\n                <div className=\"modal\">\r\n                    {this.props.content}\r\n                    <p></p>\r\n                    <div className=\"button_base b03_skewed_slide_in\" onClick={this.props.onClose}>\r\n                        <div>cancel</div>\r\n                        <div></div>\r\n                        <div>cancel</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport Modal from './Modal';\r\n\r\n\r\nclass Movie extends Component{\r\n\r\n    /* 부모컴포넌트에서 받은 정보가 원하는 자료형이 맞는지 검사한다. */\r\n    static propTypes = {\r\n        title:PropTypes.string.isRequired, //부모컴포넌트에서 title이라는 prop은 꼭 넘어오도록 요구한다.\r\n        poster:PropTypes.string,\r\n        genres:PropTypes.array.isRequired,\r\n        synopsis:PropTypes.string.isRequired,\r\n    }\r\n\r\n    state = {\r\n        isOpen:false,\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Movie\">\r\n                {/* console.log(this.props) */} {/*넘어오는 props 다 찍어보기*/}\r\n                <div className= \"Movie__Column\">\r\n                    <MoviePoster poster={this.props.poster} alt={this.props.title}></MoviePoster>\r\n                </div>\r\n                <div className=\"Movie__Column\">\r\n                    <h1>{this.props.title}</h1>\r\n                    <div className=\"Movie__Genres\">\r\n                        {this.props.genres.map((genre,index) => <MovieGenre genre={genre} key={index}></MovieGenre>)}\r\n                    </div>\r\n                    <div className=\"Movie__Synopsis\" onClick={this.toggleModal}>\r\n                        <LinesEllipsis\r\n                            text={this.props.synopsis}\r\n                            maxLine='3'\r\n                            ellipsis='...'\r\n                            trimRight\r\n                            basedOn='letters'\r\n                        />\r\n                    </div>\r\n                    <Modal show={this.state.isOpen} onClose={this.toggleModal} content={this.props.synopsis}>\r\n                    </Modal>\r\n                    \r\n                </div>\r\n\r\n            </div>            \r\n        )\r\n    }\r\n\r\n    toggleModal = ()=>{\r\n        this.setState({\r\n            isOpen: !this.state.isOpen,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie__Genre\">{genre} </span>\r\n    )\r\n}\r\n\r\nMovieGenre.propTypes={\r\n    genre : PropTypes.string.isRequired,    \r\n}\r\n\r\n/*\r\n//Movie 의 Dumb Component -> render() 없음, update() 불가, return만 있음\r\nfunction Movie({poster,title}){ //파라미터의 순서는 상관없음. 부모 컴포넌트에서 보내주는 변수명과 같게만 써주면 된다.\r\n    return(\r\n        <div>\r\n            <MoviePoster poster={poster}></MoviePoster>\r\n            <h1>{title}</h1> \r\n        </div> \r\n    );\r\n}\r\n\r\n//Dumb Component의 proptype 검사\r\nMovie.propTypes = {\r\n    poster : PropTypes.string.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n}\r\n*/\r\n\r\n//Smart Component : state,props 둘다 있음 \r\nclass MoviePoster extends Component{\r\n\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired,\r\n        alt : PropTypes.string.isRequired,\r\n    }\r\n    render(){\r\n        return(\r\n            <img src={this.props.poster} className=\"Movie__Poster\" alt={this.props.alt} title={this.props.alt}></img>\r\n        );\r\n    }\r\n}\r\n/* stateless functional 컴포넌트로 바꾸는 법 / Dumb Component: stateless, props만 갖음\r\nfunction MoviePoster({poster}){\r\n    return(\r\n        <img src={poster}></img>\r\n    );\r\n}\r\n\r\n//Dumb Component 에서 proptype 검사하는 법\r\nMoiviePoster.propTypes ={\r\n    poster : PropTypes.string.isRequired,\r\n}\r\n*/\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  //Render flow : componentWillMount() 호출 -> render() 호출 -> componentDidMount() 호출\n  //Update flow : componentWillReceiveProps() -> shouldComponentUpdate() == true 인지 확인 -> componentWillUpdate() -> render() -> componentDidUpdate()\n  \n  state = {\n\n  }\n\n  //api 에서 영화리스트 fetch 해오기\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  //비동기 : 이전 라인이 끝날때까지 기다리지 않는다.\n  _getMovies = async () => {\n    const movies = await this._callApi(); //await: _callApi()가 완료되기를 기다린다. async와 같이 사용해야한다.\n    //console.log(movies)\n    this.setState({\n      movies : movies,\n    })\n  }\n\n  _callApi = () =>{\n    //AJAX : Asynchronous Js and XML , url을 자바스크립트로 비동기화방법으로 불러옴, 뭔가를 불러올때마다 페이지 새로고침을 하고 싶지 않으므로 AJAX를 사용한다. js같이 데이터를 다룰 수 있다.\n    //promise : 비동기 AJAX 컨셉\n    //1.다른 작업이 끝나고 차례대로(동기) 불러오는 것이 아니고 다른 수행과 상관없이 다른 작업을 스케줄 해놓을 수 있다.\n    //2.시나리오가 생기고 이를 관리할 수 있게 된다.\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating') //url을 AJAX로 불러온다.\n      .then(response => response.json()) //위에서 내려온 결과를 json형태로 바꿔라\n      .then(json => json.data.movies) //위에서 내려온 결과를 리턴한다.\n      .catch(err => { console.log(err)}) //에러 나면 여기로!\n  }\n\n  //컴포넌트가 mount된 후에 2초후에 state를 업데이트 시켜준다. -> state가 업데이트되면 render() 다시 호출되서 그려줌\n  /*\n  componentDidMount(){\n    setTimeout(() => {\n      this.setState({\n        movies:[\n          //...this.state.movies, //destruction: 기존의 영화리스트를 가져오고, 2초 뒤에 새로운 영화를 추가해준다.\n          {\n            title:\"Wonder\",\n            poster:\"http://mblogthumb3.phinf.naver.net/MjAxODAxMTVfNTEg/MDAxNTE2MDA0MjM2MzQ4.Y1si1zbaAq5s5xjOhMDgYRZrhXXMkK2sE4ka1hkI5W8g.Whb0VKBm1HmkaLB-8zte3ChzsS8W1EeZcso0_uObkvEg.JPEG.mes194/movie_image-39.jpg?type=w800\"\n          },\n          {\n            title:\"LaLaLand\",\n            poster:\"http://t1.daumcdn.net/liveboard/looksofine/0cd51deb5fbb4bd79f08536321a799c3.JPG\"\n          },\n          {\n            title:\"August Rush\",\n            poster:\"https://is3-ssl.mzstatic.com/image/thumb/Video69/v4/13/1a/c3/131ac374-2b13-b3a8-ef48-d833261a9b51/pr_source.lsr/268x0w.png\"\n          },\n          {\n            title:\"Ratatouille\",\n            poster:\"http://cfile203.uf.daum.net/image/2116A44555B646E31FA67F\"\n          },\n          {\n            title: \"ZooTopia\",\n            poster:\"https://pisces.bbystatic.com/image2/BestBuy_US/images/products/4968/4968501_sa.jpg;maxHeight=640;maxWidth=550\"\n          },\n          {\n            title: \"Frozen\",\n            poster: \"https://grooveimage.files.wordpress.com/2014/01/frozen-movie-poster.jpg\"\n          }\n        ]\n      })\n    }, 2000);\n  }\n  */\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => { /*array.map(callback) array의 각각의 원소를 callback으로 매핑해서 새로운 array를 반환한다. */\n      /*index는 사이클에 따라서 원소의 인덱스로 알아서 바뀐다. map()에서는 반드시 원소마다 독립적인 key를 줘야함*/\n      //컴포넌트의 key로 index를 주는 것은 느리므로 지양!\n      return <Movie title={movie.title} \n                    poster={movie.medium_cover_image}\n                    key={movie.id}\n                    genres={movie.genres}\n                    synopsis={movie.synopsis}></Movie>\n   })\n\n   return movies;\n  }\n\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className = {movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies():'Loading...' } {/* movies state가 있으면 _renderMovies() 없으면 로딩*/}\n      </div>\n    );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')); //index.html의 root자리에 App컴포넌트 render\n\nserviceWorker.unregister();\n"],"sourceRoot":""}